<?php
    namespace sednasoft\virmisco\singiere;

    use JsonSerializable;

    /**
     * An event generated by the domain. This is what has really happened and can be replayed, so naming should be in
     * the form ThingHappened or QuuxiousBazFoobarized.
     */
    abstract class AbstractEvent implements JsonSerializable
    {
        /** @var Uuid */
        private $aggregateId;
        /** @var string */
        private $timestamp;
        /** @var int */
        private $version;

        /**
         * Creates a new instance based on the current microsecond timestamp. Subclasses should add more parameters for
         * payload.
         */
        public function __construct()
        {
            $this->timestamp = $this->currentFractionalTimestamp();
        }

        /**
         * @param Uuid $aggregateId
         * @param int $version
         */
        public function bindTo($aggregateId, $version)
        {
            $this->aggregateId = $aggregateId;
            $this->version = $version;
        }

        /**
         * Returns the unique identifier of the aggregate that generated this event.
         *
         * @return Uuid The aggregate identifier.
         */
        public function getAggregateId()
        {
            return $this->aggregateId;
        }

        /**
         * @return string The time this event occurred as an ISO8601 string with fractional seconds.
         */
        public function getTimestamp()
        {
            return $this->timestamp;
        }

        /**
         * Returns the expected version number of the aggregate after applying this event.
         *
         * @return int The aggregate version.
         */
        public function getVersion()
        {
            return $this->version;
        }

        /**
         * (PHP 5 &gt;= 5.4.0)<br/>
         * Specify data which should be serialized to JSON
         * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
         * @return mixed data which can be serialized by <b>json_encode</b>,
         * which is a value of any type other than a resource.
         */
        function jsonSerialize()
        {
            $result = [];
            foreach ((array)$this as $key => $value) {
                $key = str_replace(sprintf('%c%s%c', 0, self::class, 0), '@', $key);
                $result[array_reverse(explode("\x00", $key))[0]] = $value;
            }

            return $result;
        }

        /**
         * @return string
         */
        private function currentFractionalTimestamp()
        {
            list($fractionalSeconds, $seconds) = explode(' ', microtime());
            $timestamp = date(DATE_ATOM, $seconds);

            return substr($timestamp, 0, 19) . trim($fractionalSeconds, '0') . substr($timestamp, 19);
        }
    }
