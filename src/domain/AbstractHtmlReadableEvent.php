<?php
    namespace sednasoft\virmisco\domain;

    use sednasoft\virmisco\singiere\AbstractEvent;

    /**
     * An event generated by the domain that can generate a markdown representation of itself.
     */
    abstract class AbstractHtmlReadableEvent extends AbstractEvent implements IHtmlReadable
    {
        /**
         * @return string
         */
        public function toHtml()
        {
            $result = sprintf(
                '<div class="message"><span class="title">%s</span><dl><dt>source</dt><dd>%.8s/v%d</dd>',
                $this->classNameToWords(),
                $this->getAggregateId(),
                $this->getVersion()
            );
            foreach ((array)$this as $member => $value) {
                $member = preg_replace('<^(.*[*\x00])+>', '', $member);
                if (!in_array($member, ['aggregateId', 'version'])) {
                    $result .= $this->memberToHtml($member, $value);
                }
            }

            return $result . '</dl></div>';
        }

        /**
         * @param $camelCaseName
         * @return string
         */
        protected function camelCaseToWords($camelCaseName)
        {
            return strtolower(preg_replace('<([a-z])([A-Z])>', '\\1 \\2', $camelCaseName));
        }

        /**
         * Returns a space-separated sentence-like representation of the unqualified class name. Subclasses may
         * overwrite this to customize the name.
         *
         * @return string
         */
        protected function classNameToWords()
        {
            $unqualifiedClassName = array_slice(explode('\\', get_class($this)), -1)[0];

            return ucfirst($this->camelCaseToWords($unqualifiedClassName));
        }

        /**
         * Returns a markdown representation for an instance member. Subclasses may overwrite this for customization.
         *
         * @param string $member The name of the member.
         * @param mixed $value The value of the member.
         * @return string
         */
        protected function memberToHtml($member, $value)
        {
            return sprintf(
                '<dt>%s</dt><dd>%s</dd>',
                $this->camelCaseToWords($member),
                json_encode($value, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE)
            );
        }
    }
